{
    "docs": [
        {
            "location": "/", 
            "text": "Welcome to A Developer's Guide To the IoT  (IBM - Coursera)\n\n\nThese are my notes about the MOOC  \nA Developer's Guide To the Internet of Things (IoT)\n delivered by \nIBM\n and available on \nCoursera\n. I attended the course on May-June 2017. \n\n\nIntroduction to the course\n\n\nThis learning module introduces you to course and the instructors. The module outlines the content covered on the course and gives an introduction to the Internet of Things. It also discusses the requirements needed to complete the course including the hardware, software and details of prerequisite skills required to complete the programming assignments.\n\n\nLearning Objectives\n\n\n\n\nDescribe the high level objectives of this course, and overall flow of the content and exercises\n\n\nDescribe what IoT is and how it can lead to business transformation\n\n\n\n\nAbout this course\n\n\n\n\nWelcome to A developer's guide to the Internet of Things (3 min)\n\n\nCourse Prerequisites (3 min)\n\n\nSummary of the lessons (4 min)\n\n\nWhat practical work is in this course? (2 min)\n\n\nLearning module summary: About this course (10 min)\n\n\n\n\nWhat is the Internet of Things?\n\n\n\n\nOverview of Internet of Things (6 min)\n\n\nQuiz: IoT Quiz (5 questions)\n\n\nLearning module summary: What is the Internet of Things? (10 min)", 
            "title": "Introduction to the course"
        }, 
        {
            "location": "/#welcome-to-a-developers-guide-to-the-iot-ibm-coursera", 
            "text": "These are my notes about the MOOC   A Developer's Guide To the Internet of Things (IoT)  delivered by  IBM  and available on  Coursera . I attended the course on May-June 2017.", 
            "title": "Welcome to A Developer's Guide To the IoT  (IBM - Coursera)"
        }, 
        {
            "location": "/#introduction-to-the-course", 
            "text": "This learning module introduces you to course and the instructors. The module outlines the content covered on the course and gives an introduction to the Internet of Things. It also discusses the requirements needed to complete the course including the hardware, software and details of prerequisite skills required to complete the programming assignments.", 
            "title": "Introduction to the course"
        }, 
        {
            "location": "/#learning-objectives", 
            "text": "Describe the high level objectives of this course, and overall flow of the content and exercises  Describe what IoT is and how it can lead to business transformation", 
            "title": "Learning Objectives"
        }, 
        {
            "location": "/#about-this-course", 
            "text": "Welcome to A developer's guide to the Internet of Things (3 min)  Course Prerequisites (3 min)  Summary of the lessons (4 min)  What practical work is in this course? (2 min)  Learning module summary: About this course (10 min)", 
            "title": "About this course"
        }, 
        {
            "location": "/#what-is-the-internet-of-things", 
            "text": "Overview of Internet of Things (6 min)  Quiz: IoT Quiz (5 questions)  Learning module summary: What is the Internet of Things? (10 min)", 
            "title": "What is the Internet of Things?"
        }, 
        {
            "location": "/week2/", 
            "text": "Rapid application development in the cloud\n\n\nAn Internet of Things solution usually requires a back-end server to receive and process data coming from sensors. Cloud platforms allow new solutions to be created and deployed very rapidly without having to worry about how to host the application. This series of lessons introduces you to a cloud based Platform as a Service and an open source rapid application development environment called NodeRED.\n\n\nLearning Objectives\n\n\nDescribe a number of cloud computing solutions and their benefits\nSummarize what comprises an IoT solution\nDescribe the benefits of rapid application development through NodeRED\nDemonstrate basic understanding of NodeRED flows by creating working flows as part of a cloud app\nDemonstrate how you can use NodeRED nodes such as input, output, function and template nodes, and combine them with flow logic, to create IoT solutions (such as one with simple web services)\n\n\nIntroduction to a Platform as a Service - IBM Bluemix\n\n\n\n\nIntroduction to IBM Bluemix - Agenda\n (27 sec)\n\n\nOverview of Cloud Computing\n (3 min)\n\n\nWhat is IBM Bluemix?\n (4 min)\n\n\nCreate an IBM Bluemix account\n (52 sec)\n\n\nA tour of IBM Bluemix\n (7 min)\n\n\nIBM Bluemix Summary\n  (35 sec)\n\n\nLearning module summary: Introduction to Platform as a Service - IBM Bluemix\n  (10 min)\n\n\n\n\nRapid application development for Internet of Things\n\n\n\n\nIntroduction to NodeRED - 1\n (9 min)\n\n\nDeploy NodeRED to Bluemix using a Boilerplate - step by step\n (10 min)\n\n\nIntroduction to NodeRED - 2\n (5 min)\n\n\nAdding a new node - step by step\n (10 min)\n\n\nLearning module summary: Rapid application development for Internet of Things\n (10 min)\n\n\n\n\nNodeRED function node\n\n\n\n\nThe NodeRED Function node part1\n (6 min)\n\n\nFunction node - step by step\n (10 min)\n\n\nThe NodeRED Function node part 2\n (6 min)\n\n\nThe NodeRED Function node part 3\n (5 min)\n\n\nMaking packages available to the function node - step by step\n (10 min)\n\n\nQuiz: Using the function node\n (5 questions)\n\n\nProgramming Assignment: Your First NodeRED application\n (45 min)\n\n\nLearning module summary: NodeRED function node\n (10 min)\n\n\n\n\nAdditional NodeRED nodes\n\n\n\n\nNodeRED Additional node part 1\n (6 min)\n\n\nNodeRED Additional node part 2\n (6 min)\n\n\nTemplate node sample flow\n (10 min)\n\n\nNodeRED Additional node part 3\n (6 min)\n\n\nControlling a node using input data\n (10 min)\n\n\nNodeRED Additional node part 4\n (6 min)\n\n\nProgramming Assignment: NodeRED application\n (1h)\n\n\nLearning module summary: Additional NodeRED nodes\n (10 min)", 
            "title": "Rapid application development in the cloud"
        }, 
        {
            "location": "/week2/#rapid-application-development-in-the-cloud", 
            "text": "An Internet of Things solution usually requires a back-end server to receive and process data coming from sensors. Cloud platforms allow new solutions to be created and deployed very rapidly without having to worry about how to host the application. This series of lessons introduces you to a cloud based Platform as a Service and an open source rapid application development environment called NodeRED.", 
            "title": "Rapid application development in the cloud"
        }, 
        {
            "location": "/week2/#learning-objectives", 
            "text": "Describe a number of cloud computing solutions and their benefits\nSummarize what comprises an IoT solution\nDescribe the benefits of rapid application development through NodeRED\nDemonstrate basic understanding of NodeRED flows by creating working flows as part of a cloud app\nDemonstrate how you can use NodeRED nodes such as input, output, function and template nodes, and combine them with flow logic, to create IoT solutions (such as one with simple web services)", 
            "title": "Learning Objectives"
        }, 
        {
            "location": "/week2/#introduction-to-a-platform-as-a-service-ibm-bluemix", 
            "text": "Introduction to IBM Bluemix - Agenda  (27 sec)  Overview of Cloud Computing  (3 min)  What is IBM Bluemix?  (4 min)  Create an IBM Bluemix account  (52 sec)  A tour of IBM Bluemix  (7 min)  IBM Bluemix Summary   (35 sec)  Learning module summary: Introduction to Platform as a Service - IBM Bluemix   (10 min)", 
            "title": "Introduction to a Platform as a Service - IBM Bluemix"
        }, 
        {
            "location": "/week2/#rapid-application-development-for-internet-of-things", 
            "text": "Introduction to NodeRED - 1  (9 min)  Deploy NodeRED to Bluemix using a Boilerplate - step by step  (10 min)  Introduction to NodeRED - 2  (5 min)  Adding a new node - step by step  (10 min)  Learning module summary: Rapid application development for Internet of Things  (10 min)", 
            "title": "Rapid application development for Internet of Things"
        }, 
        {
            "location": "/week2/#nodered-function-node", 
            "text": "The NodeRED Function node part1  (6 min)  Function node - step by step  (10 min)  The NodeRED Function node part 2  (6 min)  The NodeRED Function node part 3  (5 min)  Making packages available to the function node - step by step  (10 min)  Quiz: Using the function node  (5 questions)  Programming Assignment: Your First NodeRED application  (45 min)  Learning module summary: NodeRED function node  (10 min)", 
            "title": "NodeRED function node"
        }, 
        {
            "location": "/week2/#additional-nodered-nodes", 
            "text": "NodeRED Additional node part 1  (6 min)  NodeRED Additional node part 2  (6 min)  Template node sample flow  (10 min)  NodeRED Additional node part 3  (6 min)  Controlling a node using input data  (10 min)  NodeRED Additional node part 4  (6 min)  Programming Assignment: NodeRED application  (1h)  Learning module summary: Additional NodeRED nodes  (10 min)", 
            "title": "Additional NodeRED nodes"
        }, 
        {
            "location": "/week3/", 
            "text": "Rapid application development on a Raspberry Pi\n\n\nThis unit looks at how to add a device to your solution. Creating an application on a Raspberry Pi and establishing secure, trusted communication between your cloud application and devices.\n\n\nLearning Objectives\n\n\n\n\nDescribe value of the Internet of Things Platform service\n\n\nDescribe how device types, application types, and gateway devices can communicate with the platform and each other\n\n\nDemonstrate how you can securely connect an application, device or gateway to an organization, and publish data\n\n\nDescribe how you can bind a cloud application that is running on bluemix, to a service where devices are registered\n\n\nDemonstrate how data can be received at a gateway and send to a cloud app\n\n\nDemonstrate how data can be received by a cloud app, analyzed, and a command sent back to the correct device or gateway.\n\n\n\n\nRaspberry Pi and SenseHAT\n\n\n\n\n\n\nA quick look at devices and sensor options\n (6 min)\n\n\nThe Rasperry 3 is provided with a Bluetooth and a WiFi connection, so you don't need other connection tools. Other types of devices may need further connections modules. The output connection consists of a HDMI port for a monitor output. \n\n\nThe \ncategories\n of devices are essentially two:\n\n\n\n\n\n\nthe \nplatform\n cathegory - powerful, running a complete OS, like Linux. This type has a lot of computing power in a small form factor and limited power consumption. They are ideal for a gateway or to provide some compute power at the Edge, often referred to as \nEdge Analytics\n. \n\n\n\n\n\n\nembedded\n devices - smaller footprint with a limited computing power (tipically just few KB of memory, without an OS). Some devices provide very low access to hw, such as timers and different types of sensors.\n\n\n\n\n\n\nVarious devices differ for the supported programming languages and for the IDE (Integrated Development Environment) used to program them. For example, you can choose a \nNodeMCU\n for an environmental monitoring solution, because it provides a temperature-humidity sensor. But you can also use a \nRasperry Pi\n to consolidate all that data before to report them to the Cloud platform. Sometimes there are configurations consisting on more than one device connected together, for example Raspberry Pi + Arduino (or Genuino). An other important device is the \nSense HAT\n, which is provided with a tiny processor. The Raspberry Pi talks to the Sense HAT's processor, and then that processor deals with the lower level device control and sensor control on the board.\n\n\nSense HAT\n is one add-on board provided with gyroscope, accelerometer, magnetometer, temperature, barometric pressure and humidity sensors, and has a 8x8 LED output matrix and a joistick.\n\n\nFor connecting the devices you can use a plug and play mechanism such as the Grove Kits(https://www.seeedstudio.com/Grove-Starter-Kit-p-709.html), without needing to weld.\n\n\nAs you go to develop your own IoT solution, you have got a wide range of choice of device and sensors available. But the used techniques and APIs can be applied to any device with any sensor. \n\n\n\n\n\n\nSetting up a Raspberry Pi and Raspberry Pi Sense Hat\n (8 min)\n\n\n\n\n\n\nWhy Raspberry Pi and Sense HAT?\n\n\nSense HAT has sensors for gyroscope, accelerometer, magnetometer, temperature, barometric pressure and humidity. It can output information on the built in 8x8 LED matrix, and it even has a five button joystick. There's a specific Python library named \nSense HAT\n that you can use to control the Raspberry Pi Sense HAT. So, with a Raspberry Pi Sense HAT combination, you can \nsense the environment and send and receive information to and from the cloud\n.\n\n\n\n\n\n\nRequired HW\n\n\nAlong with your Raspberry Pi and Sense HAT, you will need:\n\n\n\n\n\n\npower supply for your Pi: \nPi 3 is powered by a +5.1V micro USB supply (2.5A power supply is ideal)\n\n\n\n\n\n\na micro SD card that will act as the Pi's hard drive, holding the operating systems, software and applications you create (eight GB recommended). You need to use your computer to prepare the SD card.\n\n\n\n\n\n\na monitor with a HDMI cable for the monitor\n\n\n\n\n\n\na keyboard\n\n\n\n\n\n\na mouse\n\n\n\n\n\n\npower supplies for all.  \n\n\n\n\n\n\n\n\n\n\nInstalling the OS on the Micro SD card\n\n\nBefore you can use your Pi, you need to download an OS for it. The OS will go in the micro SD card, the OS we're using is the Linux Raspbian Jessie, which is the based on the DPM Linux. It comes with a lot of software, including LibreOffice, which is a fully featured office suite compatible with Microsoft Office files, Node-RED, which is an open source visual editor for wiring together hardware devices, APIs and online services for the internet of things, and other software. In the documentation, under installation, you will find detailed instructions to download, on downloading the latest Raspbian Jessie OS and how to write the OS image on your SD card. \n\n\n Slide the micro SD card in the Raspberry Pi. Before you power on the unit, assure that you attach the Sense HAT and that you have secured it. Attach the keyboard and mouse in the USB port, the screen on the HDMI port. Connect Internet wireless \n\n\nPower on your Raspberry Pi. The primary desktop is displayed when the boot is complete. Click on the terminal icon to open the terminal window. The rest of the setup needs to be done from the terminal window. \n\n\n\n\nYou could continue to work on the Raspberry Pi or switch to using your remote connection from your laptop. This will allow you to copy and paste from the documentation, rather than having to type every command.\n\n\n\n\n\n\n\n\nConfiguration of the HW\n\n\nTo set up a remote connection, you need the \nIP address\n of your Raspberry Pi. In the terminal window of the Raspberry Pi, enter the command \nhostname -I\n then follow the instructions for your OS to access your Raspberry Pi. From the terminal window start the Raspberry Pi software configuration tool, by typing \nsudo raspi-config\n and pressing enter. The Raspberry Pi software configuration tool provides a straightforward way to configure your Raspberry Pi. \n\n\n\n\nThe change user password option is selected, press enter, and change your password from the default. Keep this password safe, because it is not recoverable.\n\n\n\n\nUsing the up down arrow keys, select host name, press enter and set the host name for your Pi. The default is Raspberry Pi, you can use the tab keys to jump to the available options, I press enter, since I made no changes. \n\n\nNow, let's modify the localization option. Set the default for cal, use the spacebar to select and deselect what you need, and set one of the locals as default. \n\n\nSet the time zone.\n\n\nIf you have the WiFi option, set it to use the correct frequency for your country. \n\n\nFor interfacing options, select P2 SSH and enable it, this will allow you to connect the Raspberry Pi via SSH. Enable P3 VNC, this will allow you connect to the Raspberry Pi user interface remotely. Finally, enable P5 I2C, which will allow the Sense HAT to communicate with the Raspberry Pi. You're now done with the configuration tool, reboot your Raspberry Pi. Once the device boots, you may be asked to log in with your new credentials, navigate back to the terminal window. There may be update to the firmware and Raspbian OS, the command \nsudo rpi-update\n will assure you have a latest firmware. Once complete, use the \nsudo reboot -n\n command to reboot the Pi. \n\n\nTo update the Raspbian OS, enter the following three commands:\n\n\n\n\n\n\nsudo apt-get update\n to download the update\n\n\n\n\n\n\nsudo apt-get -y upgrade\n to install the update\n\n\n\n\n\n\nsudo apt-get -y autoremove\n to remove the file you downloaded. Update the Node.js, Confirm that you want to update.\n\n\n\n\n\n\nThis command will allow node applications to run bluetooth scans. Note the use of the back quotes surrounding the which node. If you use standard single quotes, you will get an error. \n\n\nGeany\n is a convenient text editor, you can install it with this command. \n\n\nThe Raspberry Pi is now ready for the class. Please reboot before starting, I hope you found this useful. Have fun exploring. \n\n\n\n\n\n\nSetting up your Raspberry Pi - step by step\n (pdf)\n\n\n\n\n\n\n\n\n\n\nRapid Application Development with NodeRED on a Raspberry Pi\n\n\n\n\nNodeRED on Raspberry Pi part 1\n (5 min)\n\n\n\n\nIn this module, we're switching focus from programming on the backend in the cloud to programming on the Raspberry Pi. Using the \nRaspbian Jessie wiyh Pixel\n OS, we have the Node-RED preinstalled, as the \nIceweasel\n browser we prefer because Node RED runs better on that browser than default.\n\n\nOn the Raspberry Pi, Node RED provides different nodes with respect to the Bluemix, in particular in \nRaspberry Pi\n section . The runtime is slightly different, i.e. here the flow lives within the file system. There is a .node-red directory under the home dir, with configuration and setting files. There are also some differences in how we install new packages to be made available to the function node and to install new nodes on the pallette. In Bluemix we have not access to the command line, so, for adding any new packages we have to modify the .json file to the environment and then rebuild the environment. But on the Raspberry Pi, we have access to the command line so we can install directly. \n\n\nFor installing a new package, we have to go inside the .node-red directory (another possibility is ti use the Global install option). We want to install as example the CRC function (cyclic redundancy check). In the \nsetting.js\n file we add the new entry at the end of the global context. Once saved the \nsetting.js\n, we use the \nnpm install\n command and the package is installed. We have to stop with thw \nnode-red-stop\n command and start with the command \nnode-red-start\n for these changes to take effect. Now we can use the CRC function for calculating the crc of a string.\n\n\n\n\nNodeRED on Raspberry Pi part 2\n (6 min)\n\n\n\n\nAdd a new node to the palette.\n\n\nWe simply need to install the package so NodeRED can access it. \n\n\nThe random node is already installed, by default, on the raspberry pi, so we are going to install another node, in particular a node that converts a binary file to base64 encoding and viceversa, enabling the text format. \n\n\nTo make the node available, simply go onto the command line, make sure you are in the .node-red directory, and digit the install command: \nnpm install node-red-node-base64\n. Once the node is installed, stopping and then starting NodeRED: \nnode-red-stop\n snd \nnode-red-start\n, then refreshing the browser screen, we'll see that node show up in the pallet. \n\n\nYou may find it convenient to have node red start when the pi boots up. The command on how to install NodeRED, so it boots at system startup. \n1:26\nAnd if I want to stop it starting as the ii boots, I've also got the command here on how to disable the autostart at boot. \n1:35\nSo I'm going to start my environment, and sure it start when the pi boots, so enter the command. \n1:44\nAnother node that's not installed by default on Bluemix, but is available at install time on the Raspberry Pi is the exec node. With the exec node, I can run a system command as if I was running it from the command line. \n2:01\nAny output generated by the command is unavailable to my flow. \n2:05\nI can very easily demonstrate the use of the node by drumming it onto the palette, \n2:11\nadding an inject and a debug node. \n2:14\nAnd I'm going to get it to issue the netstat command. So this prints information about the network's subsystem on the Raspberry Pi. You'll see I have the option of a pending msg.payload to the command. So this allows me to effectively pipe commands together like I would on the Linux command line. \n2:38\nBut I'm going to select to add an additional parameter. \n2:42\nAnd I'm going to add the minus A parameter to the netstat command. Which outputs both listening and non-listening sockets. \n2:53\nSimply deploying the flow. \n2:56\nAnd then pressing the inject node. I see the expected output coming to the debug tab. \n3:02\nSo we're now going to look at the IBM Internet of Things platform. In the next module, we'll go in to details, but for now we're going to set up, similar to the initial sample application with the simulated device. We're now going to show you how to connect the Raspberry Pi to the Internet of things platform using that quick start service. So the quick start service is a sandbox environment, it doesn't require any security or pre-registration of device it just sits there. And allows me to publish data on the application allows me to visualize that data. \n3:44\nSo to do that, we're going to use an IBM IoT output node. \n3:51\nIf we open up the Configuration, you can see we get offered the option to be a Quickstart or a Registered device. We're going to select Quickstart and it predefines a device ID. So whenever you use a device with the IBM Internet of Things platform it has to have a unique device ID. Usually, when there is a network connected device, we'll use the network adapter MAC address. Because that should guarantee uniqueness. But the device ID has to be any string that guarantees its unique within the device type and organization. You'll notice that on the configuration node, there's also a very handy link to the quick start application. \n4:41\nIf i click this link, it will open up the quick start visualization page using the generated device ID. And we're simply going to use the random node to send the random data to the quick start application. So, I create an inject node, the random node, connect it through to the IoT node. And I'm just going to put a debug node there, so I get confirmation that I am actually sending the correct data, but now I also need to format the data. \n5:14\nSo, I am going to put a function node in, before sending the data. \n5:19\nTo get Quickstart to visualize the data correctly, it has to be in the right format for the platform to understand. \n5:27\nSo within the object, we need a D property, D for device, and within that property I can have any data that I want to publish in my event. For me, I'm just going to create a random property and then can fill it in with the data coming from the random node. \n5:46\nSo now, I've got the inject node. Publishing the data every five seconds. The random node generating a random number. And this function node is formatting the data. And then sending it to the IoT node to be sent to the cloud. And if I just deploy this application, you see in the debug tab, I'm getting the expected data. And if I switch into the Quickstart application, it now shows it's receiving data and I can now see that the random number is being sent to the IoT platform. \n\n\n\n\nQuickStart flow - step by step\n (10 min)\n\n\nProgramming Assignment: QuickStart flow on Raspberry Pi (1h)\n\n\nLearning module summary: Rapid Application Development with NodeRED on a Raspberry Pi (10 min)\n\n\n\n\nIntroduction to the Watson Internet of Things Platform\n\n\nWatson Internet of Things platform\n (5 min)\n\n\nThe \nInternet of Things Platform\n is available as a service on Bluemix. It provides device access and the data connectivity. The platform provides a number of services to help us manage devices and the device data. \n\n\nWe want to ensure that all data received is from a trusted device. So, the Internet of Things Platform provides a \ndevice registry\n. This allows you to hold security and metadata on all your devices in one place. \n\n\nThe Internet of Things Platform also provides the \nconnectivity\n. It uses \nMQTT\n, the \nMQ Telemetry Transport protocol\n, as the underlying mechanism to allow devices to communicate with the platform. \n\n\nIt also provides \nsupport for gateway devices\n, and we'll look at the difference between a gateway and a device in the next module. \n\n\nThe platform provides an \nAPI for device management\n, to allow you not only get data from a device but also to actively manage the device. \n\n\nAnd lastly the Internet of Things Platform provides \nintegration with certain external services\n. So, as we look through the platform in a moment, you see we have integration with services such as \nJasper\n. \n\n\nThe Internet of Things Platform provides an API to allow devices, applications and gateways to communicate with the platform. It provides a REST API that allows access to configuration and historic data. \n\n\nIn the dashbord, go into the application, in the connection section, and click on the \nInternet of Things Platform service\n. Then lauch the Watson IoT Platform. On the left hand side there are a number of sections. \nThe first one is the Board Overview section. Below there is the Devices section. And this is where I get access to all of the devices, to be able to manage devices, create new device types, and register new devices. And all of this can also be done using the API. Below the devices section is the Access section. The Internet of Things Platform ensures all access to the platform secured. So, whether it's a device sending data to the platform or an application sending a command or a control instruction to a device, every communication has to be authenticated by the platform. This access section allows you to manage who can send data to the platform. \nNext we've got some usage information where you can get a little bit more information about what's going on in the platform. And lastly, there is the Settings section and this allows you to configure different aspects of the platform. It allows you to turn on and off the different features available on the platform, such as storing historic data. The Internet of Things Platform can store all the data that goes through the platform and allows you to retain that data for a set period of time. \nOn the settings page is where you can define and configure that behavior. The settings page is also where you enable and configure the integration with other services. \n\n\nOne concept that you need to understand when using the platform is that of an \norganization\n. \nWhile the previous Node-RED application didn't need any authorization or registration of devices or (we used the \nquick start service\n), now we have to refer to our organization that requires you to authenticate and register all devices and applications. \n\n\nYou can see the six character organization ID, up on the top right corner of the dashboard. And every time you use an API, you need to make sure that you're sending data referring to the organization ID. As we look at the API and how to use it through Node-RED or directly through the programmatic API, we'll see how to plug in your organization ID.\n\n\n\n\nDevices, Applications and Gateways part 1\n (6 min) Going a little deeper ito the Internet of Things platform, we can see that is \norganization\n that ensures that all data coming to and from a device is trusted data from a trusted source. So now let's look at who you can actually send and receive data. \n\n\n\n\nWithin the platform, there are three types of applications that can connect to the platform. \nThe first one is from a \ndevice\n. Before, it must be registered with the platform.Before you can register a device, you need to create a \ndevice type\n, that allows you to organize your devices into their capabilities. \nNext, we have an \napplication\n, that is a program that wants to communicate with the Internet of Things platform, either by receiving data from a device, or by sending a command to control a device. Unlike a device, an application doesn't need to be pre-registered to be able to communicate with the platform, but \nit does need to send an API key to authenticate itself\n. Then we have a \ngateway\n. A gateway is a special type of device. Sometimes you have sensors or sensor networks that aren't able to connect directly to the internet. So, cannot connect to the IOT platform. The Gateway acts as a bridge to connect the sensor network to the internet and the IBM IoT platform. Like a device, a gateway must be registered before it can communicate with the platform. When a device wants to send data to the platform, it creates an event, and the data flows in an event.So, devices send events to the platform, and applications receive those events. \n\n\nNow we are going to look at how you create device types, and then how you create and register a device. \nB back in Bloomix, open the service on the dashboard. So, now in the overview section. \n3:40\nTo create a device type, I switch to the device section, and then select to add a device. \n3:48\nOn this screen, I can choose a pre-existing device type if I've created one, or I can press this button to create a new device type. \n3:59\nAnd then I just go through and add any data that I want to that device type. I have the option of defining attributes, I won't capture it when defining a new device, or if I prefer I can just leave this all blank. Once you've gone through and you've created your device type, you then need to go and add a device. So, while in the screen, I can go and add a device and select the previously defined device type. \n4:29\nIf I define any attributes, I get asked to complete these when I'm registering the device, but eventually I get to this screen, where I'm asked to either select a pre-assigned key or create my own key. As a tip, when you're registering a device, I always use a common token. So as I'm modifying the code or changing the code, I always know what the token for any given device is. \n4:57\nAnd that's because, once you get to this screen, this is the last chance you get to record the token. \n5:06\nOnce you close this screen, you cannot recover a token. \n5:10\nAnd if you lose a token for a device, the only option you have, is to delete or unregister that device, and then reregister it again with a new token. \n5:21\nSo when developing, I always use a common token, so I don't have to keep enregistering and registering devices if I get what the token was. It's up to you how you want to classify your devices. The system places no demands on how you organize and classify your devices. However, when an application selects to receive data from a device, it has the option of specifying device type as one of the selectors on what data an application wants to receive. \n5:51\nSo, it's useful to classify different types of device, using a different device type.\n\n\n\n\nDevices, Applications and Gateways part 2 (7 min)\n\n\nQuiz: Using the NodeRED flow editor with your own Watson IoT platform. (5 questions)\n\n\nLearning module summary: Introduction to the Watson Internet of Things Platform (5 min)\n\n\n\n\nControlling a device\n\n\n\n\nSending commands to a device (4 min)\n\n\nSenseHAT and SenseHAT simulator nodes in NodeRED (3 min)\n\n\nProgramming Assignment: End-to-end scenario (2h)\n\n\nAdditional assistance for the end-to-end assignment (6 min)\n\n\nLearning module summary: Controlling the device (10 min)", 
            "title": "Rapid application development on a Raspberry Pi"
        }, 
        {
            "location": "/week3/#rapid-application-development-on-a-raspberry-pi", 
            "text": "This unit looks at how to add a device to your solution. Creating an application on a Raspberry Pi and establishing secure, trusted communication between your cloud application and devices.", 
            "title": "Rapid application development on a Raspberry Pi"
        }, 
        {
            "location": "/week3/#learning-objectives", 
            "text": "Describe value of the Internet of Things Platform service  Describe how device types, application types, and gateway devices can communicate with the platform and each other  Demonstrate how you can securely connect an application, device or gateway to an organization, and publish data  Describe how you can bind a cloud application that is running on bluemix, to a service where devices are registered  Demonstrate how data can be received at a gateway and send to a cloud app  Demonstrate how data can be received by a cloud app, analyzed, and a command sent back to the correct device or gateway.", 
            "title": "Learning Objectives"
        }, 
        {
            "location": "/week3/#raspberry-pi-and-sensehat", 
            "text": "", 
            "title": "Raspberry Pi and SenseHAT"
        }, 
        {
            "location": "/week3/#a-quick-look-at-devices-and-sensor-options-6-min", 
            "text": "The Rasperry 3 is provided with a Bluetooth and a WiFi connection, so you don't need other connection tools. Other types of devices may need further connections modules. The output connection consists of a HDMI port for a monitor output.   The  categories  of devices are essentially two:    the  platform  cathegory - powerful, running a complete OS, like Linux. This type has a lot of computing power in a small form factor and limited power consumption. They are ideal for a gateway or to provide some compute power at the Edge, often referred to as  Edge Analytics .     embedded  devices - smaller footprint with a limited computing power (tipically just few KB of memory, without an OS). Some devices provide very low access to hw, such as timers and different types of sensors.    Various devices differ for the supported programming languages and for the IDE (Integrated Development Environment) used to program them. For example, you can choose a  NodeMCU  for an environmental monitoring solution, because it provides a temperature-humidity sensor. But you can also use a  Rasperry Pi  to consolidate all that data before to report them to the Cloud platform. Sometimes there are configurations consisting on more than one device connected together, for example Raspberry Pi + Arduino (or Genuino). An other important device is the  Sense HAT , which is provided with a tiny processor. The Raspberry Pi talks to the Sense HAT's processor, and then that processor deals with the lower level device control and sensor control on the board.  Sense HAT  is one add-on board provided with gyroscope, accelerometer, magnetometer, temperature, barometric pressure and humidity sensors, and has a 8x8 LED output matrix and a joistick.  For connecting the devices you can use a plug and play mechanism such as the Grove Kits(https://www.seeedstudio.com/Grove-Starter-Kit-p-709.html), without needing to weld.  As you go to develop your own IoT solution, you have got a wide range of choice of device and sensors available. But the used techniques and APIs can be applied to any device with any sensor.", 
            "title": "A quick look at devices and sensor options (6 min)"
        }, 
        {
            "location": "/week3/#setting-up-a-raspberry-pi-and-raspberry-pi-sense-hat-8-min", 
            "text": "", 
            "title": "Setting up a Raspberry Pi and Raspberry Pi Sense Hat (8 min)"
        }, 
        {
            "location": "/week3/#why-raspberry-pi-and-sense-hat", 
            "text": "Sense HAT has sensors for gyroscope, accelerometer, magnetometer, temperature, barometric pressure and humidity. It can output information on the built in 8x8 LED matrix, and it even has a five button joystick. There's a specific Python library named  Sense HAT  that you can use to control the Raspberry Pi Sense HAT. So, with a Raspberry Pi Sense HAT combination, you can  sense the environment and send and receive information to and from the cloud .", 
            "title": "Why Raspberry Pi and Sense HAT?"
        }, 
        {
            "location": "/week3/#required-hw", 
            "text": "Along with your Raspberry Pi and Sense HAT, you will need:    power supply for your Pi:  Pi 3 is powered by a +5.1V micro USB supply (2.5A power supply is ideal)    a micro SD card that will act as the Pi's hard drive, holding the operating systems, software and applications you create (eight GB recommended). You need to use your computer to prepare the SD card.    a monitor with a HDMI cable for the monitor    a keyboard    a mouse    power supplies for all.", 
            "title": "Required HW"
        }, 
        {
            "location": "/week3/#installing-the-os-on-the-micro-sd-card", 
            "text": "Before you can use your Pi, you need to download an OS for it. The OS will go in the micro SD card, the OS we're using is the Linux Raspbian Jessie, which is the based on the DPM Linux. It comes with a lot of software, including LibreOffice, which is a fully featured office suite compatible with Microsoft Office files, Node-RED, which is an open source visual editor for wiring together hardware devices, APIs and online services for the internet of things, and other software. In the documentation, under installation, you will find detailed instructions to download, on downloading the latest Raspbian Jessie OS and how to write the OS image on your SD card.    Slide the micro SD card in the Raspberry Pi. Before you power on the unit, assure that you attach the Sense HAT and that you have secured it. Attach the keyboard and mouse in the USB port, the screen on the HDMI port. Connect Internet wireless   Power on your Raspberry Pi. The primary desktop is displayed when the boot is complete. Click on the terminal icon to open the terminal window. The rest of the setup needs to be done from the terminal window.    You could continue to work on the Raspberry Pi or switch to using your remote connection from your laptop. This will allow you to copy and paste from the documentation, rather than having to type every command.", 
            "title": "Installing the OS on the Micro SD card"
        }, 
        {
            "location": "/week3/#configuration-of-the-hw", 
            "text": "To set up a remote connection, you need the  IP address  of your Raspberry Pi. In the terminal window of the Raspberry Pi, enter the command  hostname -I  then follow the instructions for your OS to access your Raspberry Pi. From the terminal window start the Raspberry Pi software configuration tool, by typing  sudo raspi-config  and pressing enter. The Raspberry Pi software configuration tool provides a straightforward way to configure your Raspberry Pi.    The change user password option is selected, press enter, and change your password from the default. Keep this password safe, because it is not recoverable.   Using the up down arrow keys, select host name, press enter and set the host name for your Pi. The default is Raspberry Pi, you can use the tab keys to jump to the available options, I press enter, since I made no changes.   Now, let's modify the localization option. Set the default for cal, use the spacebar to select and deselect what you need, and set one of the locals as default.   Set the time zone.  If you have the WiFi option, set it to use the correct frequency for your country.   For interfacing options, select P2 SSH and enable it, this will allow you to connect the Raspberry Pi via SSH. Enable P3 VNC, this will allow you connect to the Raspberry Pi user interface remotely. Finally, enable P5 I2C, which will allow the Sense HAT to communicate with the Raspberry Pi. You're now done with the configuration tool, reboot your Raspberry Pi. Once the device boots, you may be asked to log in with your new credentials, navigate back to the terminal window. There may be update to the firmware and Raspbian OS, the command  sudo rpi-update  will assure you have a latest firmware. Once complete, use the  sudo reboot -n  command to reboot the Pi.   To update the Raspbian OS, enter the following three commands:    sudo apt-get update  to download the update    sudo apt-get -y upgrade  to install the update    sudo apt-get -y autoremove  to remove the file you downloaded. Update the Node.js, Confirm that you want to update.    This command will allow node applications to run bluetooth scans. Note the use of the back quotes surrounding the which node. If you use standard single quotes, you will get an error.   Geany  is a convenient text editor, you can install it with this command.   The Raspberry Pi is now ready for the class. Please reboot before starting, I hope you found this useful. Have fun exploring.", 
            "title": "Configuration of the HW"
        }, 
        {
            "location": "/week3/#setting-up-your-raspberry-pi-step-by-step-pdf", 
            "text": "", 
            "title": "Setting up your Raspberry Pi - step by step (pdf)"
        }, 
        {
            "location": "/week3/#rapid-application-development-with-nodered-on-a-raspberry-pi", 
            "text": "NodeRED on Raspberry Pi part 1  (5 min)   In this module, we're switching focus from programming on the backend in the cloud to programming on the Raspberry Pi. Using the  Raspbian Jessie wiyh Pixel  OS, we have the Node-RED preinstalled, as the  Iceweasel  browser we prefer because Node RED runs better on that browser than default.  On the Raspberry Pi, Node RED provides different nodes with respect to the Bluemix, in particular in  Raspberry Pi  section . The runtime is slightly different, i.e. here the flow lives within the file system. There is a .node-red directory under the home dir, with configuration and setting files. There are also some differences in how we install new packages to be made available to the function node and to install new nodes on the pallette. In Bluemix we have not access to the command line, so, for adding any new packages we have to modify the .json file to the environment and then rebuild the environment. But on the Raspberry Pi, we have access to the command line so we can install directly.   For installing a new package, we have to go inside the .node-red directory (another possibility is ti use the Global install option). We want to install as example the CRC function (cyclic redundancy check). In the  setting.js  file we add the new entry at the end of the global context. Once saved the  setting.js , we use the  npm install  command and the package is installed. We have to stop with thw  node-red-stop  command and start with the command  node-red-start  for these changes to take effect. Now we can use the CRC function for calculating the crc of a string.   NodeRED on Raspberry Pi part 2  (6 min)", 
            "title": "Rapid Application Development with NodeRED on a Raspberry Pi"
        }, 
        {
            "location": "/week3/#add-a-new-node-to-the-palette", 
            "text": "We simply need to install the package so NodeRED can access it.   The random node is already installed, by default, on the raspberry pi, so we are going to install another node, in particular a node that converts a binary file to base64 encoding and viceversa, enabling the text format.   To make the node available, simply go onto the command line, make sure you are in the .node-red directory, and digit the install command:  npm install node-red-node-base64 . Once the node is installed, stopping and then starting NodeRED:  node-red-stop  snd  node-red-start , then refreshing the browser screen, we'll see that node show up in the pallet.   You may find it convenient to have node red start when the pi boots up. The command on how to install NodeRED, so it boots at system startup. \n1:26\nAnd if I want to stop it starting as the ii boots, I've also got the command here on how to disable the autostart at boot. \n1:35\nSo I'm going to start my environment, and sure it start when the pi boots, so enter the command. \n1:44\nAnother node that's not installed by default on Bluemix, but is available at install time on the Raspberry Pi is the exec node. With the exec node, I can run a system command as if I was running it from the command line. \n2:01\nAny output generated by the command is unavailable to my flow. \n2:05\nI can very easily demonstrate the use of the node by drumming it onto the palette, \n2:11\nadding an inject and a debug node. \n2:14\nAnd I'm going to get it to issue the netstat command. So this prints information about the network's subsystem on the Raspberry Pi. You'll see I have the option of a pending msg.payload to the command. So this allows me to effectively pipe commands together like I would on the Linux command line. \n2:38\nBut I'm going to select to add an additional parameter. \n2:42\nAnd I'm going to add the minus A parameter to the netstat command. Which outputs both listening and non-listening sockets. \n2:53\nSimply deploying the flow. \n2:56\nAnd then pressing the inject node. I see the expected output coming to the debug tab. \n3:02\nSo we're now going to look at the IBM Internet of Things platform. In the next module, we'll go in to details, but for now we're going to set up, similar to the initial sample application with the simulated device. We're now going to show you how to connect the Raspberry Pi to the Internet of things platform using that quick start service. So the quick start service is a sandbox environment, it doesn't require any security or pre-registration of device it just sits there. And allows me to publish data on the application allows me to visualize that data. \n3:44\nSo to do that, we're going to use an IBM IoT output node. \n3:51\nIf we open up the Configuration, you can see we get offered the option to be a Quickstart or a Registered device. We're going to select Quickstart and it predefines a device ID. So whenever you use a device with the IBM Internet of Things platform it has to have a unique device ID. Usually, when there is a network connected device, we'll use the network adapter MAC address. Because that should guarantee uniqueness. But the device ID has to be any string that guarantees its unique within the device type and organization. You'll notice that on the configuration node, there's also a very handy link to the quick start application. \n4:41\nIf i click this link, it will open up the quick start visualization page using the generated device ID. And we're simply going to use the random node to send the random data to the quick start application. So, I create an inject node, the random node, connect it through to the IoT node. And I'm just going to put a debug node there, so I get confirmation that I am actually sending the correct data, but now I also need to format the data. \n5:14\nSo, I am going to put a function node in, before sending the data. \n5:19\nTo get Quickstart to visualize the data correctly, it has to be in the right format for the platform to understand. \n5:27\nSo within the object, we need a D property, D for device, and within that property I can have any data that I want to publish in my event. For me, I'm just going to create a random property and then can fill it in with the data coming from the random node. \n5:46\nSo now, I've got the inject node. Publishing the data every five seconds. The random node generating a random number. And this function node is formatting the data. And then sending it to the IoT node to be sent to the cloud. And if I just deploy this application, you see in the debug tab, I'm getting the expected data. And if I switch into the Quickstart application, it now shows it's receiving data and I can now see that the random number is being sent to the IoT platform.    QuickStart flow - step by step  (10 min)  Programming Assignment: QuickStart flow on Raspberry Pi (1h)  Learning module summary: Rapid Application Development with NodeRED on a Raspberry Pi (10 min)", 
            "title": "Add a new node to the palette."
        }, 
        {
            "location": "/week3/#introduction-to-the-watson-internet-of-things-platform", 
            "text": "", 
            "title": "Introduction to the Watson Internet of Things Platform"
        }, 
        {
            "location": "/week3/#watson-internet-of-things-platform-5-min", 
            "text": "The  Internet of Things Platform  is available as a service on Bluemix. It provides device access and the data connectivity. The platform provides a number of services to help us manage devices and the device data.   We want to ensure that all data received is from a trusted device. So, the Internet of Things Platform provides a  device registry . This allows you to hold security and metadata on all your devices in one place.   The Internet of Things Platform also provides the  connectivity . It uses  MQTT , the  MQ Telemetry Transport protocol , as the underlying mechanism to allow devices to communicate with the platform.   It also provides  support for gateway devices , and we'll look at the difference between a gateway and a device in the next module.   The platform provides an  API for device management , to allow you not only get data from a device but also to actively manage the device.   And lastly the Internet of Things Platform provides  integration with certain external services . So, as we look through the platform in a moment, you see we have integration with services such as  Jasper .   The Internet of Things Platform provides an API to allow devices, applications and gateways to communicate with the platform. It provides a REST API that allows access to configuration and historic data.   In the dashbord, go into the application, in the connection section, and click on the  Internet of Things Platform service . Then lauch the Watson IoT Platform. On the left hand side there are a number of sections. \nThe first one is the Board Overview section. Below there is the Devices section. And this is where I get access to all of the devices, to be able to manage devices, create new device types, and register new devices. And all of this can also be done using the API. Below the devices section is the Access section. The Internet of Things Platform ensures all access to the platform secured. So, whether it's a device sending data to the platform or an application sending a command or a control instruction to a device, every communication has to be authenticated by the platform. This access section allows you to manage who can send data to the platform. \nNext we've got some usage information where you can get a little bit more information about what's going on in the platform. And lastly, there is the Settings section and this allows you to configure different aspects of the platform. It allows you to turn on and off the different features available on the platform, such as storing historic data. The Internet of Things Platform can store all the data that goes through the platform and allows you to retain that data for a set period of time. \nOn the settings page is where you can define and configure that behavior. The settings page is also where you enable and configure the integration with other services.   One concept that you need to understand when using the platform is that of an  organization . \nWhile the previous Node-RED application didn't need any authorization or registration of devices or (we used the  quick start service ), now we have to refer to our organization that requires you to authenticate and register all devices and applications.   You can see the six character organization ID, up on the top right corner of the dashboard. And every time you use an API, you need to make sure that you're sending data referring to the organization ID. As we look at the API and how to use it through Node-RED or directly through the programmatic API, we'll see how to plug in your organization ID.   Devices, Applications and Gateways part 1  (6 min) Going a little deeper ito the Internet of Things platform, we can see that is  organization  that ensures that all data coming to and from a device is trusted data from a trusted source. So now let's look at who you can actually send and receive data.    Within the platform, there are three types of applications that can connect to the platform. \nThe first one is from a  device . Before, it must be registered with the platform.Before you can register a device, you need to create a  device type , that allows you to organize your devices into their capabilities. \nNext, we have an  application , that is a program that wants to communicate with the Internet of Things platform, either by receiving data from a device, or by sending a command to control a device. Unlike a device, an application doesn't need to be pre-registered to be able to communicate with the platform, but  it does need to send an API key to authenticate itself . Then we have a  gateway . A gateway is a special type of device. Sometimes you have sensors or sensor networks that aren't able to connect directly to the internet. So, cannot connect to the IOT platform. The Gateway acts as a bridge to connect the sensor network to the internet and the IBM IoT platform. Like a device, a gateway must be registered before it can communicate with the platform. When a device wants to send data to the platform, it creates an event, and the data flows in an event.So, devices send events to the platform, and applications receive those events.   Now we are going to look at how you create device types, and then how you create and register a device. \nB back in Bloomix, open the service on the dashboard. So, now in the overview section. \n3:40\nTo create a device type, I switch to the device section, and then select to add a device. \n3:48\nOn this screen, I can choose a pre-existing device type if I've created one, or I can press this button to create a new device type. \n3:59\nAnd then I just go through and add any data that I want to that device type. I have the option of defining attributes, I won't capture it when defining a new device, or if I prefer I can just leave this all blank. Once you've gone through and you've created your device type, you then need to go and add a device. So, while in the screen, I can go and add a device and select the previously defined device type. \n4:29\nIf I define any attributes, I get asked to complete these when I'm registering the device, but eventually I get to this screen, where I'm asked to either select a pre-assigned key or create my own key. As a tip, when you're registering a device, I always use a common token. So as I'm modifying the code or changing the code, I always know what the token for any given device is. \n4:57\nAnd that's because, once you get to this screen, this is the last chance you get to record the token. \n5:06\nOnce you close this screen, you cannot recover a token. \n5:10\nAnd if you lose a token for a device, the only option you have, is to delete or unregister that device, and then reregister it again with a new token. \n5:21\nSo when developing, I always use a common token, so I don't have to keep enregistering and registering devices if I get what the token was. It's up to you how you want to classify your devices. The system places no demands on how you organize and classify your devices. However, when an application selects to receive data from a device, it has the option of specifying device type as one of the selectors on what data an application wants to receive. \n5:51\nSo, it's useful to classify different types of device, using a different device type.   Devices, Applications and Gateways part 2 (7 min)  Quiz: Using the NodeRED flow editor with your own Watson IoT platform. (5 questions)  Learning module summary: Introduction to the Watson Internet of Things Platform (5 min)", 
            "title": "Watson Internet of Things platform (5 min)"
        }, 
        {
            "location": "/week3/#controlling-a-device", 
            "text": "Sending commands to a device (4 min)  SenseHAT and SenseHAT simulator nodes in NodeRED (3 min)  Programming Assignment: End-to-end scenario (2h)  Additional assistance for the end-to-end assignment (6 min)  Learning module summary: Controlling the device (10 min)", 
            "title": "Controlling a device"
        }, 
        {
            "location": "/week4/", 
            "text": "Lower level programming for the Internet of Things\n\n\nUp to now the course has used the NodeRED rapid application development environment. This unit looks at how to program for the Internet of Things platform using more traditional programming environments\n\n\nLearning Objectives\n\n\n\n\nCreate an IoT solution using the IBM Watson IoT Foundation APIs\n\n\nDemonstrate the use an MQTT client to connect to the Watson IoT platform\n\n\nDescribe how MQTT works and the benefits that differentiated from other messaging protocols\n\n\n\n\nWatson IoT APIs\n\n\n\n\nIoT platform APIs (3 min)\n\n\nSenseHAT python API (4 min)\n\n\nProgramming Assignment: SenseHAT python API1 (h 30m)\n\n\nLearning module summary: Watson IoT APIs (10 min)\n\n\n\n\nMQTT\n\n\n\n\nMQTT (5 min)\n\n\nQuiz: MQTT in Watson IoT Platform (5 questions)\n\n\nMQTT Exercise (10 min)\n\n\nYou reached the end of this learning module. You are now able to: (10 min)\n\n\n\n\nDeploying Applications to Bluemix\n\n\n\n\nDeploying an application to Bluemix part 1 (6 min)\n\n\nApplication development for Bluemix - basic server step by step (10 min)\n\n\nDeploying an application to Bluemix part 2 (6 min)\n\n\nApplication development for Bluemix - deploy to Bluemix step by step (10 min)\n\n\nInstalling additional developer tools (10 min)\n\n\nDeploying an application to Bluemix part 3 (6 min)\n\n\nApplication development for Bluemix - accessing services step by step (10 min)\n\n\nProgramming Assignment: Using the IoT APIs in a Bluemix application (1h 30m)\n\n\nLearning module summary: Deploying Applications to Bluemix (10 min)\n\n\n\n\nWrap up\n\n\n\n\nCourse summary (2 min)", 
            "title": "Lower level programming for the Internet of Things"
        }, 
        {
            "location": "/week4/#lower-level-programming-for-the-internet-of-things", 
            "text": "Up to now the course has used the NodeRED rapid application development environment. This unit looks at how to program for the Internet of Things platform using more traditional programming environments", 
            "title": "Lower level programming for the Internet of Things"
        }, 
        {
            "location": "/week4/#learning-objectives", 
            "text": "Create an IoT solution using the IBM Watson IoT Foundation APIs  Demonstrate the use an MQTT client to connect to the Watson IoT platform  Describe how MQTT works and the benefits that differentiated from other messaging protocols", 
            "title": "Learning Objectives"
        }, 
        {
            "location": "/week4/#watson-iot-apis", 
            "text": "IoT platform APIs (3 min)  SenseHAT python API (4 min)  Programming Assignment: SenseHAT python API1 (h 30m)  Learning module summary: Watson IoT APIs (10 min)", 
            "title": "Watson IoT APIs"
        }, 
        {
            "location": "/week4/#mqtt", 
            "text": "MQTT (5 min)  Quiz: MQTT in Watson IoT Platform (5 questions)  MQTT Exercise (10 min)  You reached the end of this learning module. You are now able to: (10 min)", 
            "title": "MQTT"
        }, 
        {
            "location": "/week4/#deploying-applications-to-bluemix", 
            "text": "Deploying an application to Bluemix part 1 (6 min)  Application development for Bluemix - basic server step by step (10 min)  Deploying an application to Bluemix part 2 (6 min)  Application development for Bluemix - deploy to Bluemix step by step (10 min)  Installing additional developer tools (10 min)  Deploying an application to Bluemix part 3 (6 min)  Application development for Bluemix - accessing services step by step (10 min)  Programming Assignment: Using the IoT APIs in a Bluemix application (1h 30m)  Learning module summary: Deploying Applications to Bluemix (10 min)", 
            "title": "Deploying Applications to Bluemix"
        }, 
        {
            "location": "/week4/#wrap-up", 
            "text": "Course summary (2 min)", 
            "title": "Wrap up"
        }, 
        {
            "location": "/resources/", 
            "text": "Programming resources\n\n\nFor information about installing Node.js, including the download links, follow this link : \nhttps://nodejs.org\n.\n\n\nThe latest version of Node.js is available at \nhttps://nodejs.org\n. You should use the latest stable version (currently v4.5.0 LTS)\n\n\nhttps://www.python.org\n is a good place for all things python - remember this course is using python 2.7 for all assignments. You don't need to install python on your computer, and python will exist on your Raspberry Pi once it is configured.\n\n\nIBM Watson IoT Platform documentation is available at \nhttps://new-console.ng.bluemix.net/docs/services/IoT/index.html\n\n\nNodeRED documentation is available at \nhttp://nodered.org/docs/\n\n\nIf you need a resource to help with JavaScript then this site \nhttp://www.w3schools.com/js/\n is a good reference. Previous learners also suggested the following sites for week 4 assignment assistance if not too familiar with JavaScript:\n\n\n\n\nhttp://javascriptissexy.com/javascript-variable-scope-and-hoisting-explained/\n\n\nhttp://javascriptissexy.com/understand-javascripts-this-with-clarity-and-master-it/\n\n\n\n\nFor MQTT a good place to start is the MQTT primary site : \nhttp://mqtt.org/documentation\n or the eclipse implementation of the client in the paho project \nhttp://www.eclipse.org/paho/\n\n\nIBM Bluemix resources\n\n\nIBM Bluemix can be found here \nhttps://www.bluemix.net\n and information about CloudFoundry, the Open Source technology that the Bluemix Platform as a Service functionality is built on, can be found here \nhttp://docs.cloudfoundry.org\n\n\nThe CloudFoundry Command Line Interface tool (cf) is available from \nhttps://github.com/cloudfoundry/cli/releases\n. NOTE: This needs to run from your PC or laptop as there is not a version available that can run on the Raspberry Pi\n\n\nRaspberry Pi resources\n\n\nElement14 IoT learner kit : \nhttps://www.element14.com/community/docs/DOC-82034/l/element14-iot-learner-kit\n\n\nYou can find out about the Raspberry Pi and the senseHAT from the foundation pages \nhttps://www.raspberrypi.org\n including the documentation \nhttps://www.raspberrypi.org/documentation/\n where you will find help on getting setup and connected.\n\n\nThe SenseHAT Python API is documented on this site \nhttp://pythonhosted.org/sense-hat/\n\n\nWatson IoT for developers\n\n\nFor more information on Watson IoT from IBM go to http://www.ibm.com/internet-of-things/iot-development.html\n\n\nGet a head start with your device and the Watson IoT platform using these recipes https://developer.ibm.com/recipes/\n\n\nThe Watson IoT APIs are documented here:\n\n\nAmericas : https://console.ng.bluemix.net/docs/services/IoT/iot_platform_client_lib.html\nEurope and Middle East : https://console.eu-gb.bluemix.net/docs/services/IoT/iot_platform_client_lib.html\nAsia Pacific : https://console.au-syd.bluemix.net/docs/services/IoT/iot_platform_client_lib.html\nMQTT information is available at http://mqtt.org. Follow the 'Software' link then 'client libraries' to access the many libraries available to be able to access the Watson IoT platform.\n\n\nThe Eclipse paho project implements an mqtt client in a number of programming languages http://www.eclipse.org/paho/\n\n\nIBM Watson IoT Academy\n\n\nWatson IoT Academy includes courses and training to give you the edge you need to maximize your IoT experience.\n\n\nhttps://www.iot-academy.info/\n\n\nEnd User License Agreement\n\n\nIBM COURSE NOTICE AND END USER LICENSE AGREEMENT\n\n\nBY ACCESSING THE IBM COURSE AND RELATED CONTENT AVAILABLE TO YOU THROUGH COURSERA, INC., YOU AGREE TO THE FOLLOWING TERMS AND CONDITIONS OF THIS AGREEMENT. PLEASE PRINT THIS PAGE FOR YOUR RECORDS.\n\n\nThis Agreement applies to your use of the IBM course and its related content, details, and materials (\u201cIBM Course\u201d). By downloading, copying, or otherwise accessing the IBM Course, you agree to be bound by the terms of this Agreement. If you do not wish to accept the terms of this Agreement, or if you are not at least 18 years old, do not access the Course.\n\n\nThis Agreement also applies to updates, add-on content, refreshed content or other IBM Course materials that IBM may make available from time to time, except to the extent that they are accompanied by separate terms.\n\n\nIBM has entered into an agreement with Coursera, Inc. (\u201cCoursera\u201d) to make the IBM Course available to you.\n\n\nCoursera has authorized you to access the IBM Course and has full control over your Coursera account pursuant to the terms of service agreed upon between you and Coursera. Per those terms of service, Coursera may terminate your right to access the IBM Course or may make changes to your account, and may restrict the way in which you access the IBM Course.\n\n\nKey Terms\n\n\nLICENSE\n\n\nIBM hereby grants you a limited, revocable, personal, non-exclusive, non-assignable right and license to access and view the IBM Course for your internal use, in accordance with this Agreement and your agreement with Coursera. This license includes the right to access the IBM Course via the Coursera platform on your personal computer or other supported device for a limited period of time as defined in the agreement between you and Coursera.\n\n\nTECHNICAL SUPPORT\n\n\nPlease contact Coursera for any technical support needed to access the IBM Course or Coursera platform. Any questions regarding IBM Course content may be submitted to IBM via the contact information provided in the IBM Course and related materials.\n\n\nINTERNET CONTENT\n\n\nThere are a wide variety of sites you are able to visit over the Internet. We do not control your Internet activity or the sites you visit and we are not responsible for any online monitoring of your activity by third parties.\n\n\nLikewise, IBM exercises no control whatsoever over the content of the information passing through your systems. Neither we nor our suppliers warrant, nor do they assume responsibility for, any consequences suffered by any person as a result of Internet access including, without limitation, the possibility of contracting computer viruses, accessing information with offensive, inaccurate or inappropriate content, etc. IBM shall not be responsible for any damages suffered by any person as a result of your obtaining Internet access. You must exercise your own due diligence and judgment before relying on any information available on the Internet, and you must determine that you have all necessary rights to copy, publish or otherwise distribute any such information available on the Internet under copyright and other applicable laws. By its very nature, the Internet contains offensive or harmful material, in some cases under descriptions that have been mislabeled or are otherwise deceptive. Please use caution and common sense in using the Internet.\n\n\nAny link or access to third-party sites and services that we make available to you as part of the IBM Course is provided to you only as a convenience, and the inclusion of any link or access does not imply an endorsement by us of the third-party site or service.\n\n\nOWNERSHIP AND COPYRIGHT PROTECTION\n\n\nYou acknowledge that (a) the IBM Course contains proprietary information that is protected by applicable intellectual property and other laws, and (b) IBM owns all right, title and interest in and to the IBM Course including without limitation all Intellectual Property Rights therein and thereto. \u201cIntellectual Property Rights\u201d means any and all rights existing from time to time under patent law, copyright law, trademark law, unfair competition law, and any and all other proprietary rights, and any and all applications, renewals, extensions and restorations thereof, now or hereafter in force and effect worldwide. You agree that you will not, and will not allow any third party to, (i) copy, sell, license, distribute, transfer, modify, adapt, translate, prepare derivative works from, decompile, reverse engineer, disassemble or otherwise attempt to derive source code from the IBM Course, unless otherwise expressly permitted, (ii) take any action to circumvent or defeat the security or content usage rules provided, deployed or enforced by any functionality (including without limitation digital rights management functionality) contained in the IBM Course or Coursera platform, (iii) use the IBM Course to access, copy, transfer, transcode or retransmit content in violation of any law or third party rights or (iv) remove, obscure, or alter our copyright notices, trademarks, or other proprietary rights notices affixed to or contained within or accessed in conjunction with or through the IBM Course. We reserve all rights not expressly granted to you in this Agreement. The IBM Course is protected by copyright and other intellectual property laws and treaties. IBM and its licensors own the title, copyright, and other intellectual property rights in the IBM Course. The IBM Course is licensed, not sold. This Agreement does not grant you any rights to our trademarks or service marks.\n\n\nYou must treat the IBM Course like any other copyrighted material. Unless otherwise expressly permitted, you may not copy any documentation or materials accompanying the IBM Course.\n\n\nRIGHTS AND RESPONSIBILITIES\n\n\nYou must comply with all applicable laws and regulations, and with any rules and policies that Coursera imposes upon your registration with the IBM Course or your use of the Coursera service (to the extent that Coursera\u2019s rules and policies are not inconsistent with this Agreement, applicable laws and regulations).\n\n\nNO WARRANTIES\n\n\nIBM expressly disclaims any warranty for the IBM Course. The IBM Course and any related documentation are provided \u201cAS IS\u201d, with all faults, and without warranty of any kind, either express or implied, and the entire risk as to satisfactory quality, performance, accuracy and effort is with you. TO THE MAXIMUM EXTENT PERMITTED BY LAW, IBM EXPRESSLY DISCLAIMS ANY IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, ACCURACY, NON-INFRINGEMENT, SYSTEM INTEGRATION AND YOUR ENJOYMENT OF THE SERVICE.\n\n\nWE MAKE NO WARRANTY: (I) THAT THE IBM COURSE WILL FULFILL ANY OF YOUR PARTICULAR PURPOSES OR NEEDS; (II) REGARDING THE SECURITY, RELIABILITY, TIMELINESS OR PERFORMANCE; (III) THAT THE IBM COURSE WILL BE ERROR-FREE OR BUG FREE; OR (IV) THAT ANY ERRORS IN THE IBM COURSE WILL BE CORRECTED. ANY CONTENT OR MATERIAL DOWNLOADED OR OTHERWISE OBTAINED THROUGH THE USE OF THE IBM COURSE IS DONE AT YOUR OWN DISCRETION AND RISK.\n\n\nSome jurisdictions do not allow the disclaimer of implied warranties, so the foregoing disclaimer may not apply to you.\n\n\nIBM does not control your access to the Coursera platform or the Internet and cannot guarantee continuous, uninterrupted or secure access to the IBM Course. IBM does not warrant that the IBM Course will be available on a specified date or time or that the Coursera network will have the capacity to meet your demand during specific hours.\n\n\nThe provisions of this \u201cNO WARRANTIES\u201d section shall survive any termination or expiration of this Agreement.\n\n\nLIMITS ON OUR LIABILITY FOR DAMAGES\n\n\nYOU EXPRESSLY UNDERSTAND AND AGREE THAT IBM SHALL NOT BE LIABLE TO YOU FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, CONSEQUENTIAL OR EXEMPLARY DAMAGES, INCLUDING BUT NOT LIMITED TO, DAMAGES FOR LOSS OF PROFITS, GOODWILL, USE, BUSINESS INTERRUPTION, DATA OR OTHER INTANGIBLE LOSSES (EVEN IF WE HAVE BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES) RESULTING FROM: (I) THE USE OR THE INABILITY TO USE THE IBM COURSE; (II) RELIANCE UPON THE CONTENT IN THE IBM COURSE; (III) THE COST OF PROCUREMENT OF SUBSTITUTE COURSES; (IV) UNAUTHORIZED ACCESS TO, ALTERATION, THEFT OR DESTRUCTION OF YOUR TRANSMISSIONS, BUSINESS INFORMATION, PROGRAMS OR DATA; (V) LOSS OF BUSINESS INFORMATION OR DATA; OR (VI) ANY OTHER MATTER RELATING TO THE IBM COURSE. THE FOREGOING LIMITATIONS SHALL APPLY NOTWITHSTANDING A FAILURE OF ESSENTIAL PURPOSE OF ANY LIMITED REMEDY AND TO THE FULLEST EXTENT PERMITTED BY LAW.\n\n\nUNDER NO CIRCUMSTANCES WILL IBM\u2019S LIABILITY TO YOU EXCEED THE AMOUNT OF ONE HUNDRED U.S. DOLLARS ($100.00).\n\n\nNOTHING IN THIS AGREEMENT IS INTENDED TO EXCLUDE OR LIMIT ANY CONDITION, WARRANTY, RIGHT OR LIABILITY WHICH MAY NOT BE LAWFULLY EXCLUDED OR LIMITED. SOME JURISDICTIONS DO NOT ALLOW THE EXCLUSION OF CERTAIN WARRANTIES OR CONDITIONS OR THE LIMITATION OR EXCLUSION OF LIABILITY FOR LOSS OR DAMAGE CAUSED BY NEGLIGENCE, BREACH OF CONTRACT OR BREACH OF IMPLIED TERMS, OR INCIDENTAL OR CONSEQUENTIAL DAMAGES. ACCORDINGLY, ONLY THE ABOVE LIMITATIONS IN THE \u201cNO WARRANTIES\u201d AND \u201cNO LIABILITY FOR DAMAGES\u201d SECTIONS OF THIS AGREEMENT WHICH ARE LAWFUL IN YOUR JURISDICTION WILL APPLY TO YOU AND OUR LIABILITY WILL BE LIMITED TO THE MAXIMUM EXTENT PERMITTED BY LAW.\n\n\nYou agree that regardless of any statute or law to the contrary, any claim arising out of or related to the IBM Course or this Agreement must be filed within one (1) year after such claim arose or be forever barred.\n\n\nYou must indemnify, defend and hold us and our directors, officers, employees, agents, affiliates, subsidiaries, successors and assigns harmless from and against any claim, demand, suit, action, cause of action, loss, damage, judgment, liability, cost or expense (including attorney\u2019s fees) arising out of or related to your use of the IBM Course, whether asserted by you or by any other person or entity.\n\n\nThe provisions of this \u201cNO LIABILITY FOR DAMAGES\u201d section shall survive any termination or expiration of this Agreement.\n\n\nEXPORT RESTRICTIONS\n\n\nThe IBM Course may be subject to export controls or restrictions by the United States or other countries or territories. You agree to (i) comply with the requirements of the U.S. Department of Commerce (DOC) Export Administration Regulations (EAR) (see http://www.bis.doc.gov) and all applicable international, national, state, regional and local laws, and regulations, including without limitation any applicable import and use restrictions, (ii) not export, or re-export, directly or indirectly, the IBM Course to any country outlined in the EAR, nor to any person or entity on the DOC Denied Persons, Entities and Unverified Lists, the U.S. Department of State\u2019s Debarred List, or on the U.S. Department of Treasury\u2019s lists of Specially Designated Nationals, Specially Designated Narcotics Traffickers, or Specially Designated Terrorists, (iii) not export, or re-export the IBM Course to any military entity not approved under the EAR, or to any other entity for any military purpose, and (iv) not license, sell, provide or distribute the IBM Course for use in connection with chemical, biological, or nuclear weapons or missiles capable of delivering such weapons.\n\n\nGOVERNING LAW\n\n\nThis Agreement will be governed by the laws of the New York, United States of America, without giving effect to its conflict of laws provisions.\n\n\nUse of or access to the IBM Course from any jurisdiction where such use or access is illegal is prohibited. If you use or access the IBM Course from a location outside of the United States, you will be fully responsible for compliance with all relevant local laws.\n\n\nADDITIONAL INFORMATION:\n\n\nAdditional information about IBM may be found at our website, www.ibm.com.\n\n\nBite Sized IoT learning\n\n\nThere are also some additional small videos out on YouTube that may help when working on this course:\n\n\nhttps://www.youtube.com/playlist?list=PLmYWYcF4DWZZ9nE5BFJC3LWw9By7IeHKn", 
            "title": "Resources"
        }, 
        {
            "location": "/resources/#programming-resources", 
            "text": "For information about installing Node.js, including the download links, follow this link :  https://nodejs.org .  The latest version of Node.js is available at  https://nodejs.org . You should use the latest stable version (currently v4.5.0 LTS)  https://www.python.org  is a good place for all things python - remember this course is using python 2.7 for all assignments. You don't need to install python on your computer, and python will exist on your Raspberry Pi once it is configured.  IBM Watson IoT Platform documentation is available at  https://new-console.ng.bluemix.net/docs/services/IoT/index.html  NodeRED documentation is available at  http://nodered.org/docs/  If you need a resource to help with JavaScript then this site  http://www.w3schools.com/js/  is a good reference. Previous learners also suggested the following sites for week 4 assignment assistance if not too familiar with JavaScript:   http://javascriptissexy.com/javascript-variable-scope-and-hoisting-explained/  http://javascriptissexy.com/understand-javascripts-this-with-clarity-and-master-it/   For MQTT a good place to start is the MQTT primary site :  http://mqtt.org/documentation  or the eclipse implementation of the client in the paho project  http://www.eclipse.org/paho/", 
            "title": "Programming resources"
        }, 
        {
            "location": "/resources/#ibm-bluemix-resources", 
            "text": "IBM Bluemix can be found here  https://www.bluemix.net  and information about CloudFoundry, the Open Source technology that the Bluemix Platform as a Service functionality is built on, can be found here  http://docs.cloudfoundry.org  The CloudFoundry Command Line Interface tool (cf) is available from  https://github.com/cloudfoundry/cli/releases . NOTE: This needs to run from your PC or laptop as there is not a version available that can run on the Raspberry Pi", 
            "title": "IBM Bluemix resources"
        }, 
        {
            "location": "/resources/#raspberry-pi-resources", 
            "text": "Element14 IoT learner kit :  https://www.element14.com/community/docs/DOC-82034/l/element14-iot-learner-kit  You can find out about the Raspberry Pi and the senseHAT from the foundation pages  https://www.raspberrypi.org  including the documentation  https://www.raspberrypi.org/documentation/  where you will find help on getting setup and connected.  The SenseHAT Python API is documented on this site  http://pythonhosted.org/sense-hat/", 
            "title": "Raspberry Pi resources"
        }, 
        {
            "location": "/resources/#watson-iot-for-developers", 
            "text": "For more information on Watson IoT from IBM go to http://www.ibm.com/internet-of-things/iot-development.html  Get a head start with your device and the Watson IoT platform using these recipes https://developer.ibm.com/recipes/  The Watson IoT APIs are documented here:  Americas : https://console.ng.bluemix.net/docs/services/IoT/iot_platform_client_lib.html\nEurope and Middle East : https://console.eu-gb.bluemix.net/docs/services/IoT/iot_platform_client_lib.html\nAsia Pacific : https://console.au-syd.bluemix.net/docs/services/IoT/iot_platform_client_lib.html\nMQTT information is available at http://mqtt.org. Follow the 'Software' link then 'client libraries' to access the many libraries available to be able to access the Watson IoT platform.  The Eclipse paho project implements an mqtt client in a number of programming languages http://www.eclipse.org/paho/", 
            "title": "Watson IoT for developers"
        }, 
        {
            "location": "/resources/#ibm-watson-iot-academy", 
            "text": "Watson IoT Academy includes courses and training to give you the edge you need to maximize your IoT experience.  https://www.iot-academy.info/", 
            "title": "IBM Watson IoT Academy"
        }, 
        {
            "location": "/resources/#end-user-license-agreement", 
            "text": "IBM COURSE NOTICE AND END USER LICENSE AGREEMENT  BY ACCESSING THE IBM COURSE AND RELATED CONTENT AVAILABLE TO YOU THROUGH COURSERA, INC., YOU AGREE TO THE FOLLOWING TERMS AND CONDITIONS OF THIS AGREEMENT. PLEASE PRINT THIS PAGE FOR YOUR RECORDS.  This Agreement applies to your use of the IBM course and its related content, details, and materials (\u201cIBM Course\u201d). By downloading, copying, or otherwise accessing the IBM Course, you agree to be bound by the terms of this Agreement. If you do not wish to accept the terms of this Agreement, or if you are not at least 18 years old, do not access the Course.  This Agreement also applies to updates, add-on content, refreshed content or other IBM Course materials that IBM may make available from time to time, except to the extent that they are accompanied by separate terms.  IBM has entered into an agreement with Coursera, Inc. (\u201cCoursera\u201d) to make the IBM Course available to you.  Coursera has authorized you to access the IBM Course and has full control over your Coursera account pursuant to the terms of service agreed upon between you and Coursera. Per those terms of service, Coursera may terminate your right to access the IBM Course or may make changes to your account, and may restrict the way in which you access the IBM Course.  Key Terms  LICENSE  IBM hereby grants you a limited, revocable, personal, non-exclusive, non-assignable right and license to access and view the IBM Course for your internal use, in accordance with this Agreement and your agreement with Coursera. This license includes the right to access the IBM Course via the Coursera platform on your personal computer or other supported device for a limited period of time as defined in the agreement between you and Coursera.  TECHNICAL SUPPORT  Please contact Coursera for any technical support needed to access the IBM Course or Coursera platform. Any questions regarding IBM Course content may be submitted to IBM via the contact information provided in the IBM Course and related materials.  INTERNET CONTENT  There are a wide variety of sites you are able to visit over the Internet. We do not control your Internet activity or the sites you visit and we are not responsible for any online monitoring of your activity by third parties.  Likewise, IBM exercises no control whatsoever over the content of the information passing through your systems. Neither we nor our suppliers warrant, nor do they assume responsibility for, any consequences suffered by any person as a result of Internet access including, without limitation, the possibility of contracting computer viruses, accessing information with offensive, inaccurate or inappropriate content, etc. IBM shall not be responsible for any damages suffered by any person as a result of your obtaining Internet access. You must exercise your own due diligence and judgment before relying on any information available on the Internet, and you must determine that you have all necessary rights to copy, publish or otherwise distribute any such information available on the Internet under copyright and other applicable laws. By its very nature, the Internet contains offensive or harmful material, in some cases under descriptions that have been mislabeled or are otherwise deceptive. Please use caution and common sense in using the Internet.  Any link or access to third-party sites and services that we make available to you as part of the IBM Course is provided to you only as a convenience, and the inclusion of any link or access does not imply an endorsement by us of the third-party site or service.  OWNERSHIP AND COPYRIGHT PROTECTION  You acknowledge that (a) the IBM Course contains proprietary information that is protected by applicable intellectual property and other laws, and (b) IBM owns all right, title and interest in and to the IBM Course including without limitation all Intellectual Property Rights therein and thereto. \u201cIntellectual Property Rights\u201d means any and all rights existing from time to time under patent law, copyright law, trademark law, unfair competition law, and any and all other proprietary rights, and any and all applications, renewals, extensions and restorations thereof, now or hereafter in force and effect worldwide. You agree that you will not, and will not allow any third party to, (i) copy, sell, license, distribute, transfer, modify, adapt, translate, prepare derivative works from, decompile, reverse engineer, disassemble or otherwise attempt to derive source code from the IBM Course, unless otherwise expressly permitted, (ii) take any action to circumvent or defeat the security or content usage rules provided, deployed or enforced by any functionality (including without limitation digital rights management functionality) contained in the IBM Course or Coursera platform, (iii) use the IBM Course to access, copy, transfer, transcode or retransmit content in violation of any law or third party rights or (iv) remove, obscure, or alter our copyright notices, trademarks, or other proprietary rights notices affixed to or contained within or accessed in conjunction with or through the IBM Course. We reserve all rights not expressly granted to you in this Agreement. The IBM Course is protected by copyright and other intellectual property laws and treaties. IBM and its licensors own the title, copyright, and other intellectual property rights in the IBM Course. The IBM Course is licensed, not sold. This Agreement does not grant you any rights to our trademarks or service marks.  You must treat the IBM Course like any other copyrighted material. Unless otherwise expressly permitted, you may not copy any documentation or materials accompanying the IBM Course.  RIGHTS AND RESPONSIBILITIES  You must comply with all applicable laws and regulations, and with any rules and policies that Coursera imposes upon your registration with the IBM Course or your use of the Coursera service (to the extent that Coursera\u2019s rules and policies are not inconsistent with this Agreement, applicable laws and regulations).  NO WARRANTIES  IBM expressly disclaims any warranty for the IBM Course. The IBM Course and any related documentation are provided \u201cAS IS\u201d, with all faults, and without warranty of any kind, either express or implied, and the entire risk as to satisfactory quality, performance, accuracy and effort is with you. TO THE MAXIMUM EXTENT PERMITTED BY LAW, IBM EXPRESSLY DISCLAIMS ANY IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, ACCURACY, NON-INFRINGEMENT, SYSTEM INTEGRATION AND YOUR ENJOYMENT OF THE SERVICE.  WE MAKE NO WARRANTY: (I) THAT THE IBM COURSE WILL FULFILL ANY OF YOUR PARTICULAR PURPOSES OR NEEDS; (II) REGARDING THE SECURITY, RELIABILITY, TIMELINESS OR PERFORMANCE; (III) THAT THE IBM COURSE WILL BE ERROR-FREE OR BUG FREE; OR (IV) THAT ANY ERRORS IN THE IBM COURSE WILL BE CORRECTED. ANY CONTENT OR MATERIAL DOWNLOADED OR OTHERWISE OBTAINED THROUGH THE USE OF THE IBM COURSE IS DONE AT YOUR OWN DISCRETION AND RISK.  Some jurisdictions do not allow the disclaimer of implied warranties, so the foregoing disclaimer may not apply to you.  IBM does not control your access to the Coursera platform or the Internet and cannot guarantee continuous, uninterrupted or secure access to the IBM Course. IBM does not warrant that the IBM Course will be available on a specified date or time or that the Coursera network will have the capacity to meet your demand during specific hours.  The provisions of this \u201cNO WARRANTIES\u201d section shall survive any termination or expiration of this Agreement.  LIMITS ON OUR LIABILITY FOR DAMAGES  YOU EXPRESSLY UNDERSTAND AND AGREE THAT IBM SHALL NOT BE LIABLE TO YOU FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, CONSEQUENTIAL OR EXEMPLARY DAMAGES, INCLUDING BUT NOT LIMITED TO, DAMAGES FOR LOSS OF PROFITS, GOODWILL, USE, BUSINESS INTERRUPTION, DATA OR OTHER INTANGIBLE LOSSES (EVEN IF WE HAVE BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES) RESULTING FROM: (I) THE USE OR THE INABILITY TO USE THE IBM COURSE; (II) RELIANCE UPON THE CONTENT IN THE IBM COURSE; (III) THE COST OF PROCUREMENT OF SUBSTITUTE COURSES; (IV) UNAUTHORIZED ACCESS TO, ALTERATION, THEFT OR DESTRUCTION OF YOUR TRANSMISSIONS, BUSINESS INFORMATION, PROGRAMS OR DATA; (V) LOSS OF BUSINESS INFORMATION OR DATA; OR (VI) ANY OTHER MATTER RELATING TO THE IBM COURSE. THE FOREGOING LIMITATIONS SHALL APPLY NOTWITHSTANDING A FAILURE OF ESSENTIAL PURPOSE OF ANY LIMITED REMEDY AND TO THE FULLEST EXTENT PERMITTED BY LAW.  UNDER NO CIRCUMSTANCES WILL IBM\u2019S LIABILITY TO YOU EXCEED THE AMOUNT OF ONE HUNDRED U.S. DOLLARS ($100.00).  NOTHING IN THIS AGREEMENT IS INTENDED TO EXCLUDE OR LIMIT ANY CONDITION, WARRANTY, RIGHT OR LIABILITY WHICH MAY NOT BE LAWFULLY EXCLUDED OR LIMITED. SOME JURISDICTIONS DO NOT ALLOW THE EXCLUSION OF CERTAIN WARRANTIES OR CONDITIONS OR THE LIMITATION OR EXCLUSION OF LIABILITY FOR LOSS OR DAMAGE CAUSED BY NEGLIGENCE, BREACH OF CONTRACT OR BREACH OF IMPLIED TERMS, OR INCIDENTAL OR CONSEQUENTIAL DAMAGES. ACCORDINGLY, ONLY THE ABOVE LIMITATIONS IN THE \u201cNO WARRANTIES\u201d AND \u201cNO LIABILITY FOR DAMAGES\u201d SECTIONS OF THIS AGREEMENT WHICH ARE LAWFUL IN YOUR JURISDICTION WILL APPLY TO YOU AND OUR LIABILITY WILL BE LIMITED TO THE MAXIMUM EXTENT PERMITTED BY LAW.  You agree that regardless of any statute or law to the contrary, any claim arising out of or related to the IBM Course or this Agreement must be filed within one (1) year after such claim arose or be forever barred.  You must indemnify, defend and hold us and our directors, officers, employees, agents, affiliates, subsidiaries, successors and assigns harmless from and against any claim, demand, suit, action, cause of action, loss, damage, judgment, liability, cost or expense (including attorney\u2019s fees) arising out of or related to your use of the IBM Course, whether asserted by you or by any other person or entity.  The provisions of this \u201cNO LIABILITY FOR DAMAGES\u201d section shall survive any termination or expiration of this Agreement.  EXPORT RESTRICTIONS  The IBM Course may be subject to export controls or restrictions by the United States or other countries or territories. You agree to (i) comply with the requirements of the U.S. Department of Commerce (DOC) Export Administration Regulations (EAR) (see http://www.bis.doc.gov) and all applicable international, national, state, regional and local laws, and regulations, including without limitation any applicable import and use restrictions, (ii) not export, or re-export, directly or indirectly, the IBM Course to any country outlined in the EAR, nor to any person or entity on the DOC Denied Persons, Entities and Unverified Lists, the U.S. Department of State\u2019s Debarred List, or on the U.S. Department of Treasury\u2019s lists of Specially Designated Nationals, Specially Designated Narcotics Traffickers, or Specially Designated Terrorists, (iii) not export, or re-export the IBM Course to any military entity not approved under the EAR, or to any other entity for any military purpose, and (iv) not license, sell, provide or distribute the IBM Course for use in connection with chemical, biological, or nuclear weapons or missiles capable of delivering such weapons.  GOVERNING LAW  This Agreement will be governed by the laws of the New York, United States of America, without giving effect to its conflict of laws provisions.  Use of or access to the IBM Course from any jurisdiction where such use or access is illegal is prohibited. If you use or access the IBM Course from a location outside of the United States, you will be fully responsible for compliance with all relevant local laws.  ADDITIONAL INFORMATION:  Additional information about IBM may be found at our website, www.ibm.com.", 
            "title": "End User License Agreement"
        }, 
        {
            "location": "/resources/#bite-sized-iot-learning", 
            "text": "There are also some additional small videos out on YouTube that may help when working on this course:  https://www.youtube.com/playlist?list=PLmYWYcF4DWZZ9nE5BFJC3LWw9By7IeHKn", 
            "title": "Bite Sized IoT learning"
        }
    ]
}